<!-- Include Leaflet CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />

<!-- Include D3.js library -->
<script src="https://d3js.org/d3.v7.min.js"></script>

<!-- Include Leaflet JavaScript -->
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

<!-- Adjust the size of the map container to full size -->
<div id="mapid" style="width: 100vw; height: 100vh;"></div>

<!-- Dropdown menu for property selection -->
<select id="propertyDropdown" style="position: fixed; top: 10px; right: 10px; width: 200px; font-size: 16px; z-index: 1000;">
    <option value="home_value">Home Values</option>
    <option value="cap_rate">Cap Rate</option>
    <option value="rental_rate">Rental Rates</option>
</select>

<script>
// Initialize a variable to store the map instance
let map;
// Initialize the map container
var mymap = L.map('mapid').setView([31.0000, -100.0000], 7);
// Function to create map with Cap Rate data
function createMapWithCapRate(locations) {
    function calculateMinMaxCapRates(locations) {
        let minCapRate = Number.POSITIVE_INFINITY;
        let maxCapRate = Number.NEGATIVE_INFINITY;
        locations.forEach(loc => {
            if (loc.cap_rate < minCapRate) {
                minCapRate = loc.cap_rate;
            }
            if (loc.cap_rate > maxCapRate) {
                maxCapRate = loc.cap_rate;
            }
        });
        return { minCapRate, maxCapRate };
    }

    function formatNumber(number) {
        return number.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
    }


    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: 'Map data © <a href="https://openstreetmap.org">OpenStreetMap</a> contributors',
    }).addTo(mymap);

    fetch('/data')
        .then(response => response.json())
        .then(locations => {
            const { minCapRate, maxCapRate } = calculateMinMaxCapRates(locations);

            var colorScale = d3.scaleLinear()
                .domain([minCapRate, (minCapRate + maxCapRate) / 2, maxCapRate])
                .range(["red", "yellow", "green"]);

            function getColor(capRate) {
                return colorScale(capRate);
            }

            locations.forEach(loc => {
                var popupContent = `<b>City Name:</b> ${loc.RegionName}<br>` +
                    `<b>Rental Rates:</b> $${formatNumber(loc.Recent_Month_tx_rental)}<br>` +
                    `<b>Home Values:</b> $${formatNumber(loc.Recent_Month_home_values)}<br>` +
                    `<b>Cap Rate:</b> ${formatNumber(loc.cap_rate)}`;

                var marker = L.circleMarker([loc.lat, loc.lng], {
                    color: getColor(loc.cap_rate),
                    fillOpacity: 1
                }).addTo(mymap);

                marker.on('mouseover', function (e) {
                    this.bindPopup(popupContent).openPopup();
                });

                marker.on('mouseout', function (e) {
                    this.closePopup();
                });
            });
        })
        .catch(error => console.error('Error fetching data:', error));
}


// Function to create map with Rental Rates data using Recent_Month_tx_rental field
function createMapWithRental(locations) {
    function calculateQuartiles(locations) {
        let rentalRates = locations.map(loc => loc.Recent_Month_tx_rental).sort((a, b) => a - b);
        let q1 = d3.quantile(rentalRates, 0.25);
        let q3 = d3.quantile(rentalRates, 0.75);
        let avg = d3.mean(rentalRates);
        return { q1, q3, avg };
    }

    function formatNumber(number) {
        return number.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
    }

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: 'Map data © <a href="https://openstreetmap.org">OpenStreetMap</a> contributors',
    }).addTo(mymap);

    const { q1, q3, avg } = calculateQuartiles(locations);

    var colorScale = d3.scaleLinear()
        .domain([q1, avg, q3])
        .range(["red", "yellow", "green"]);

    function getColor(rentalRate) {
        if (rentalRate > q3) {
            return colorScale(q3);
        } else if (rentalRate > avg) {
            return colorScale(avg);
        }
        return colorScale(rentalRate);
    }

    locations.forEach(loc => {
        var popupContent = `<b>City Name:</b> ${loc.RegionName}<br>` +
            `<b>Rental Rates:</b> $${formatNumber(loc.Recent_Month_tx_rental)}<br>` +
            `<b>Home Values:</b> $${formatNumber(loc.Recent_Month_home_values)}<br>` +
            `<b>Cap Rate:</b> ${formatNumber(loc.cap_rate)}`;

        var marker = L.circleMarker([loc.lat, loc.lng], {
            color: getColor(loc.Recent_Month_tx_rental),
            fillOpacity: 1
        }).addTo(mymap);

        marker.on('mouseover', function (e) {
            this.bindPopup(popupContent).openPopup();
        });

        marker.on('mouseout', function (e) {
            this.closePopup();
        });
    });
}
// Function to create map with Home Values data using Recent_Month_home_values field
function createMapWithHomeValues(locations) {
    function calculateQuartiles(locations) {
        let homeValues = locations.map(loc => loc.Recent_Month_home_values).sort((a, b) => a - b);
        let q1 = d3.quantile(homeValues, 0.25);
        let q3 = d3.quantile(homeValues, 0.75);
        let avg = d3.mean(homeValues);
        return { q1, q3, avg };
    }

    function formatNumber(number) {
        return number.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
    }

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: 'Map data © <a href="https://openstreetmap.org">OpenStreetMap</a> contributors',
    }).addTo(mymap);

    const { q1, q3, avg } = calculateQuartiles(locations);

    var colorScale = d3.scaleLinear()
        .domain([q1, avg, q3])
        .range(["green", "yellow", "red"]);

    function getColor(homeValue) {
        if (homeValue > q3) {
            return colorScale(q3);
        } else if (homeValue > avg) {
            return colorScale(avg);
        }
        return colorScale(homeValue);
    }

    locations.forEach(loc => {
        var popupContent = `<b>City Name:</b> ${loc.RegionName}<br>` +
            `<b>Rental Rates:</b> $${formatNumber(loc.Recent_Month_tx_rental)}<br>` +
            `<b>Home Values:</b> $${formatNumber(loc.Recent_Month_home_values)}<br>` +
            `<b>Cap Rate:</b> ${formatNumber(loc.cap_rate)}`;

        var marker = L.circleMarker([loc.lat, loc.lng], {
            color: getColor(loc.Recent_Month_home_values),
            fillOpacity: 1
        }).addTo(mymap);

        marker.on('mouseover', function (e) {
            this.bindPopup(popupContent).openPopup();
        });

        marker.on('mouseout', function (e) {
            this.closePopup();
        });
    });
}

// Dropdown menu event listener
const dropdown = document.getElementById('propertyDropdown');
dropdown.addEventListener('change', function() {
    const selectedProperty = this.value;

    // Check if map is already initialized and remove it
    if (map) {
        map.remove();
    }

    // Create a new map based on the selected property
    if (selectedProperty === 'cap_rate') {
        fetch('/data')
            .then(response => response.json())
            .then(locations => {
                map = createMapWithCapRate(locations);
            })
            .catch(error => console.error('Error fetching cap rate data:', error));
    } else if (selectedProperty === 'rental_rate') {
        fetch('/data')
            .then(response => response.json())
            .then(locations => {
                map = createMapWithRental(locations);
            })
            .catch(error => console.error('Error fetching rental rate data:', error));
    } else if (selectedProperty === 'home_value') {
        fetch('/data')
            .then(response => response.json())
            .then(locations => {
                map = createMapWithHomeValues(locations);
            })
            .catch(error => console.error('Error fetching home value data:', error));
    }
});

// Set default selection to "Home Value" and display the corresponding map
document.addEventListener('DOMContentLoaded', function() {
    // Set default selection to "Home Value"
    dropdown.value = 'home_value';

    // Fetch cap rate data and create the map
    fetch('/data')
        .then(response => response.json())
        .then(locations => {
            map = createMapWithHomeValues(locations);
        })
        .catch(error => console.error('Error fetching cap rate data:', error));
});


</script>